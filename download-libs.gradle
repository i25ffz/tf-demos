/*
 * download-models.gradle
 *     Downloads model files from ${MODEL_URL} into application's asset folder
 * Input:
 *     project.ext.TMP_DIR: absolute path to hold downloaded zip files
 *     project.ext.ASSET_DIR: absolute path to save unzipped model files
 * Output:
 *     3 model files will be downloaded into given folder of ext.ASSET_DIR
 */
// hard coded model files
// LINT.IfChange
def libs = ['native/libtensorflow_inference.so/armeabi-v7a/libtensorflow_inference.so',
    'native/libtensorflow_demo.so/armeabi-v7a/libtensorflow_demo.so']

// Root URL for model archives
def LIBS_URL = 'https://ci.tensorflow.org/view/Nightly/job/nightly-android/lastSuccessfulBuild/artifact/out'

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'de.undercouch:gradle-download-task:3.2.0'
    }
}

import de.undercouch.gradle.tasks.download.Download

task downloadJar(type: Download){
    src "${LIBS_URL}/libandroid_tensorflow_inference_java.jar"
    dest new File(project.ext.LIBS_DIR)
    overwrite true
}

task downloadLibs(type: Download){
    for (f in libs) {
        src "${LIBS_URL}/" + f
    }
    dest new File(project.ext.LIBS_DIR + "/armeabi-v7a")
    overwrite true
}

afterEvaluate {
    // if models are not available, download & unzip them
    def needDownload = false

    // create dir if not exists
    if (!(new File(project.ext.LIBS_DIR + "/armeabi-v7a")).exists()) {
        new File(project.ext.LIBS_DIR + "/armeabi-v7a").mkdirs();
    }

    if (!(new File(project.ext.LIBS_DIR + '/libandroid_tensorflow_inference_java.jar')).exists()) {
        needDownload = true
    }

    if (needDownload) {
        assembleDebug.dependsOn downloadJar, downloadLibs
        assembleRelease.dependsOn downloadJar, downloadLibs
    }
}

